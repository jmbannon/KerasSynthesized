#ifndef TEST_TILED_TENSOR4_HPP
#define TEST_TILED_TENSOR4_HPP

#include "HLS/hls.h"
#include <stdio.h>
#include <math.h>
#include "../tiled_tensor4.hpp"
#include "../convolution.hpp"

int test_tiled_tensor4(tiled_tensor4 *t, Numeric *expected_linear) {
  int ret;
  Numeric data[t->vol];

  for (int i = 0; i < t->vol; i++) {
    data[i] = i;
  }

  tiled_tensor4_set_data(t, data);

  for (uint i = 0; i < t->vol; i++) {
    if (t->data[i] != expected_linear[i]) {
      return 1;
    }
  }

  for (uint i = 0; i < t->vol; i++) {
    if (t->data[i] != expected_linear[i]) {
      return 1;
    }
  }

  int idx = 0;
  for (uint c = 0; c < t->chans; c++) {
  	for (uint i = 0; i < t->depth; i++) {
  	  for (uint j = 0; j < t->rows; j++) {
  	    for (uint k = 0; k < t->cols; k++) {
  	      if (tiled_tensor4_val(t, j, k, i, c) != idx++) {
  	        return 1;
  	      }
  	    }
      }
    }
  }

  return 0;
}

int test_tiled_tensor4_row_row() {
  Numeric expected_linear[384] = { 0., 1., 4., 5., 8., 9., 24., 25., 28., 29., 32., 33., 96., 97., 100., 101., 104., 105., 120., 121., 124., 125., 128., 129., 2., 3., 6., 7., 10., 11., 26., 27., 30., 31., 34., 35., 98., 99., 102., 103., 106., 107., 122., 123., 126., 127., 130., 131., 12., 13., 16., 17., 20., 21., 36., 37., 40., 41., 44., 45., 108., 109., 112., 113., 116., 117., 132., 133., 136., 137., 140., 141., 14., 15., 18., 19., 22., 23., 38., 39., 42., 43., 46., 47., 110., 111., 114., 115., 118., 119., 134., 135., 138., 139., 142., 143., 48., 49., 52., 53., 56., 57., 72., 73., 76., 77., 80., 81., 144., 145., 148., 149., 152., 153., 168., 169., 172., 173., 176., 177., 50., 51., 54., 55., 58., 59., 74., 75., 78., 79., 82., 83., 146., 147., 150., 151., 154., 155., 170., 171., 174., 175., 178., 179., 60., 61., 64., 65., 68., 69., 84., 85., 88., 89., 92., 93., 156., 157., 160., 161., 164., 165., 180., 181., 184., 185., 188., 189., 62., 63., 66., 67., 70., 71., 86., 87., 90., 91., 94., 95., 158., 159., 162., 163., 166., 167., 182., 183., 186., 187., 190., 191., 192., 193., 196., 197., 200., 201., 216., 217., 220., 221., 224., 225., 288., 289., 292., 293., 296., 297., 312., 313., 316., 317., 320., 321., 194., 195., 198., 199., 202., 203., 218., 219., 222., 223., 226., 227., 290., 291., 294., 295., 298., 299., 314., 315., 318., 319., 322., 323., 204., 205., 208., 209., 212., 213., 228., 229., 232., 233., 236., 237., 300., 301., 304., 305., 308., 309., 324., 325., 328., 329., 332., 333., 206., 207., 210., 211., 214., 215., 230., 231., 234., 235., 238., 239., 302., 303., 306., 307., 310., 311., 326., 327., 330., 331., 334., 335., 240., 241., 244., 245., 248., 249., 264., 265., 268., 269., 272., 273., 336., 337., 340., 341., 344., 345., 360., 361., 364., 365., 368., 369., 242., 243., 246., 247., 250., 251., 266., 267., 270., 271., 274., 275., 338., 339., 342., 343., 346., 347., 362., 363., 366., 367., 370., 371., 252., 253., 256., 257., 260., 261., 276., 277., 280., 281., 284., 285., 348., 349., 352., 353., 356., 357., 372., 373., 376., 377., 380., 381., 254., 255., 258., 259., 262., 263., 278., 279., 282., 283., 286., 287., 350., 351., 354., 355., 358., 359., 374., 375., 378., 379., 382., 383. };
  tiled_tensor4 t;

  tiled_tensor4_init(&t, 6, 4, 4, 4, 3, 2, 2, 2, ROW_MAJ, ROW_MAJ);
  return test_tiled_tensor4(&t, expected_linear);
}

int test_tiled_tensor4_dep_dep() {
  Numeric expected_linear[384] = { 0., 24., 96., 120., 1., 25., 97., 121., 4., 28., 100., 124., 5., 29., 101., 125., 8., 32., 104., 128., 9., 33., 105., 129., 48., 72., 144., 168., 49., 73., 145., 169., 52., 76., 148., 172., 53., 77., 149., 173., 56., 80., 152., 176., 57., 81., 153., 177., 192., 216., 288., 312., 193., 217., 289., 313., 196., 220., 292., 316., 197., 221., 293., 317., 200., 224., 296., 320., 201., 225., 297., 321., 240., 264., 336., 360., 241., 265., 337., 361., 244., 268., 340., 364., 245., 269., 341., 365., 248., 272., 344., 368., 249., 273., 345., 369., 2., 26., 98., 122., 3., 27., 99., 123., 6., 30., 102., 126., 7., 31., 103., 127., 10., 34., 106., 130., 11., 35., 107., 131., 50., 74., 146., 170., 51., 75., 147., 171., 54., 78., 150., 174., 55., 79., 151., 175., 58., 82., 154., 178., 59., 83., 155., 179., 194., 218., 290., 314., 195., 219., 291., 315., 198., 222., 294., 318., 199., 223., 295., 319., 202., 226., 298., 322., 203., 227., 299., 323., 242., 266., 338., 362., 243., 267., 339., 363., 246., 270., 342., 366., 247., 271., 343., 367., 250., 274., 346., 370., 251., 275., 347., 371., 12., 36., 108., 132., 13., 37., 109., 133., 16., 40., 112., 136., 17., 41., 113., 137., 20., 44., 116., 140., 21., 45., 117., 141., 60., 84., 156., 180., 61., 85., 157., 181., 64., 88., 160., 184., 65., 89., 161., 185., 68., 92., 164., 188., 69., 93., 165., 189., 204., 228., 300., 324., 205., 229., 301., 325., 208., 232., 304., 328., 209., 233., 305., 329., 212., 236., 308., 332., 213., 237., 309., 333., 252., 276., 348., 372., 253., 277., 349., 373., 256., 280., 352., 376., 257., 281., 353., 377., 260., 284., 356., 380., 261., 285., 357., 381., 14., 38., 110., 134., 15., 39., 111., 135., 18., 42., 114., 138., 19., 43., 115., 139., 22., 46., 118., 142., 23., 47., 119., 143., 62., 86., 158., 182., 63., 87., 159., 183., 66., 90., 162., 186., 67., 91., 163., 187., 70., 94., 166., 190., 71., 95., 167., 191., 206., 230., 302., 326., 207., 231., 303., 327., 210., 234., 306., 330., 211., 235., 307., 331., 214., 238., 310., 334., 215., 239., 311., 335., 254., 278., 350., 374., 255., 279., 351., 375., 258., 282., 354., 378., 259., 283., 355., 379., 262., 286., 358., 382., 263., 287., 359., 383. };
  tiled_tensor4 t;

  tiled_tensor4_init(&t, 6, 4, 4, 4, 3, 2, 2, 2, DEP_MAJ, DEP_MAJ);
  return test_tiled_tensor4(&t, expected_linear);
}

int test_tiled_tensor4_chn_chn() {
  Numeric expected_linear[384] = { 0., 96., 24., 120., 1., 97., 25., 121., 4., 100., 28., 124., 5., 101., 29., 125., 8., 104., 32., 128., 9., 105., 33., 129., 192., 288., 216., 312., 193., 289., 217., 313., 196., 292., 220., 316., 197., 293., 221., 317., 200., 296., 224., 320., 201., 297., 225., 321., 48., 144., 72., 168., 49., 145., 73., 169., 52., 148., 76., 172., 53., 149., 77., 173., 56., 152., 80., 176., 57., 153., 81., 177., 240., 336., 264., 360., 241., 337., 265., 361., 244., 340., 268., 364., 245., 341., 269., 365., 248., 344., 272., 368., 249., 345., 273., 369., 2., 98., 26., 122., 3., 99., 27., 123., 6., 102., 30., 126., 7., 103., 31., 127., 10., 106., 34., 130., 11., 107., 35., 131., 194., 290., 218., 314., 195., 291., 219., 315., 198., 294., 222., 318., 199., 295., 223., 319., 202., 298., 226., 322., 203., 299., 227., 323., 50., 146., 74., 170., 51., 147., 75., 171., 54., 150., 78., 174., 55., 151., 79., 175., 58., 154., 82., 178., 59., 155., 83., 179., 242., 338., 266., 362., 243., 339., 267., 363., 246., 342., 270., 366., 247., 343., 271., 367., 250., 346., 274., 370., 251., 347., 275., 371., 12., 108., 36., 132., 13., 109., 37., 133., 16., 112., 40., 136., 17., 113., 41., 137., 20., 116., 44., 140., 21., 117., 45., 141., 204., 300., 228., 324., 205., 301., 229., 325., 208., 304., 232., 328., 209., 305., 233., 329., 212., 308., 236., 332., 213., 309., 237., 333., 60., 156., 84., 180., 61., 157., 85., 181., 64., 160., 88., 184., 65., 161., 89., 185., 68., 164., 92., 188., 69., 165., 93., 189., 252., 348., 276., 372., 253., 349., 277., 373., 256., 352., 280., 376., 257., 353., 281., 377., 260., 356., 284., 380., 261., 357., 285., 381., 14., 110., 38., 134., 15., 111., 39., 135., 18., 114., 42., 138., 19., 115., 43., 139., 22., 118., 46., 142., 23., 119., 47., 143., 206., 302., 230., 326., 207., 303., 231., 327., 210., 306., 234., 330., 211., 307., 235., 331., 214., 310., 238., 334., 215., 311., 239., 335., 62., 158., 86., 182., 63., 159., 87., 183., 66., 162., 90., 186., 67., 163., 91., 187., 70., 166., 94., 190., 71., 167., 95., 191., 254., 350., 278., 374., 255., 351., 279., 375., 258., 354., 282., 378., 259., 355., 283., 379., 262., 358., 286., 382., 263., 359., 287., 383. };
  tiled_tensor4 t;

  tiled_tensor4_init(&t, 6, 4, 4, 4, 3, 2, 2, 2, CHN_MAJ, CHN_MAJ);
  return test_tiled_tensor4(&t, expected_linear);
}

#endif